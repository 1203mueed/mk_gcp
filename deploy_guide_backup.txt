# Complete Google Cloud Deployment Guide (No Load Balancer)

## Architecture Overview
- **Frontend**: Cloud Run (containerized React build)
- **Backend API**: Cloud Run  
- **Python/YOLO Service**: Cloud Run
- **Database**: Cloud SQL PostgreSQL
- **File Storage**: Cloud Storage
- **Domain**: Direct Cloud Run domain mapping with automatic SSL

## Step 1: Setup Google Cloud Project

```bash
# Set your project ID
export PROJECT_ID=your-project-id
gcloud config set project $PROJECT_ID

# Enable required APIs
gcloud services enable \
    run.googleapis.com \
    sql-component.googleapis.com \
    storage.googleapis.com \
    cloudbuild.googleapis.com
```

## Step 2: Create Cloud SQL Database

```bash
# Create PostgreSQL instance (smallest tier)
gcloud sql instances create moyla-db \
    --database-version=POSTGRES_14 \
    --tier=db-f1-micro \
    --region=us-central1 \
    --storage-type=HDD \
    --storage-size=10GB \
    --storage-auto-increase

# Create database
gcloud sql databases create moyla_kothai --instance=moyla-db

# Create user
gcloud sql users create moyla_user \
    --instance=moyla-db \
    --password=your_secure_password

# Get connection name for later use
gcloud sql instances describe moyla-db --format="value(connectionName)"
```

## Step 3: Create Cloud Storage Bucket

```bash
# Create bucket for file uploads
gsutil mb -p $PROJECT_ID -c STANDARD -l us-central1 gs://${PROJECT_ID}-uploads

# Set public access for uploaded images
gsutil iam ch allUsers:objectViewer gs://${PROJECT_ID}-uploads
```

## Step 4: Create Dockerfiles

### Frontend Dockerfile
```dockerfile
# Dockerfile (in root directory)
FROM node:18-alpine as builder
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

FROM nginx:alpine
COPY --from=builder /app/build /usr/share/nginx/html

# Create nginx config
RUN echo 'server { \
    listen 8080; \
    root /usr/share/nginx/html; \
    index index.html; \
    location / { \
        try_files $uri $uri/ /index.html; \
    } \
}' > /etc/nginx/conf.d/default.conf

EXPOSE 8080
CMD ["nginx", "-g", "daemon off;"]
```

### Backend Dockerfile
```dockerfile
# backend/Dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
EXPOSE 8080

# Update server.js to use port 8080
ENV PORT=8080
CMD ["node", "server.js"]
```

### Python Service Dockerfile
```dockerfile
# python_service/Dockerfile
FROM python:3.9-slim
WORKDIR /app

# Install system dependencies for OpenCV
RUN apt-get update && apt-get install -y \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libglib2.0-0 \
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .

EXPOSE 8080
ENV PORT=8080
CMD ["python", "app.py"]
```

## Step 5: Update Application Configuration

### Update Backend Database Config
```javascript
// backend/config/database.js
const { Pool } = require('pg');

const pool = new Pool({
  host: process.env.DB_HOST || '/cloudsql/' + process.env.INSTANCE_CONNECTION_NAME,
  port: process.env.DB_PORT || 5432,
  user: process.env.DB_USER || 'moyla_user',
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME || 'moyla_kothai',
  ...(process.env.NODE_ENV === 'production' && {
    host: `/cloudsql/${process.env.INSTANCE_CONNECTION_NAME}`,
  })
});

module.exports = pool;
```

### Update Backend Server Port
```javascript
// backend/server.js
const PORT = process.env.PORT || 8080;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
```

### Update Python Service Port
```python
# python_service/app.py
import os
from flask import Flask

app = Flask(__name__)

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)
```

## Step 6: Deploy Services to Cloud Run

### Deploy Python/YOLO Service
```bash
cd python_service

gcloud run deploy moyla-yolo \
    --source . \
    --region us-central1 \
    --allow-unauthenticated \
    --port 8080 \
    --memory 2Gi \
    --cpu 2 \
    --timeout 900

# Save the service URL
export YOLO_URL=$(gcloud run services describe moyla-yolo --region=us-central1 --format="value(status.url)")
echo "YOLO Service URL: $YOLO_URL"
```

### Deploy Backend API
```bash
cd ../backend

gcloud run deploy moyla-backend \
    --source . \
    --region us-central1 \
    --allow-unauthenticated \
    --port 8080 \
    --memory 1Gi \
    --cpu 1 \
    --add-cloudsql-instances $PROJECT_ID:us-central1:moyla-db \
    --set-env-vars="INSTANCE_CONNECTION_NAME=$PROJECT_ID:us-central1:moyla-db,DB_USER=moyla_user,DB_PASSWORD=your_secure_password,DB_NAME=moyla_kothai,YOLO_SERVICE_URL=$YOLO_URL,STORAGE_BUCKET=${PROJECT_ID}-uploads,NODE_ENV=production"

# Save the service URL
export BACKEND_URL=$(gcloud run services describe moyla-backend --region=us-central1 --format="value(status.url)")
echo "Backend Service URL: $BACKEND_URL"
```

### Deploy Frontend
```bash
cd ../

# Create production environment file
echo "REACT_APP_API_BASE_URL=$BACKEND_URL" > .env.production

gcloud run deploy moyla-frontend \
    --source . \
    --region us-central1 \
    --allow-unauthenticated \
    --port 8080 \
    --memory 512Mi \
    --cpu 1

# Save the service URL
export FRONTEND_URL=$(gcloud run services describe moyla-frontend --region=us-central1 --format="value(status.url)")
echo "Frontend Service URL: $FRONTEND_URL"
```

## Step 7: Setup Database

```bash
# Connect to Cloud SQL and run setup script
gcloud sql connect moyla-db --user=moyla_user --database=moyla_kothai

# In the SQL prompt, run your setup commands:
# \i /path/to/your/setup-database.sql
```

## Step 8: Map Your Custom Domain

```bash
# Map your domain to the frontend service
gcloud run domain-mappings create \
    --service moyla-frontend \
    --domain yourdomain.com \
    --region us-central1

# Optional: Add www subdomain
gcloud run domain-mappings create \
    --service moyla-frontend \
    --domain www.yourdomain.com \
    --region us-central1

# Get DNS configuration instructions
gcloud run domain-mappings describe \
    --domain yourdomain.com \
    --region us-central1
```

## Step 9: Configure DNS in Your Domain Registrar

1. Go to your domain registrar (GoDaddy, Namecheap, etc.)
2. Add the CNAME records provided by the previous command
3. Example records:
   ```
   Type: CNAME
   Name: yourdomain.com (or @)
   Value: ghs.googlehosted.com
   
   Type: CNAME  
   Name: www
   Value: ghs.googlehosted.com
   ```

## Step 10: Verify Deployment

```bash
# Check all services are running
gcloud run services list --region=us-central1

# Test endpoints
curl $FRONTEND_URL
curl $BACKEND_URL/health  # if you have a health endpoint
curl $YOLO_URL/health     # if you have a health endpoint

# Check domain mapping status
gcloud run domain-mappings list --region=us-central1
```

## Step 11: Monitor and Troubleshoot

```bash
# View logs for each service
gcloud run services logs read moyla-frontend --region=us-central1 --limit=50
gcloud run services logs read moyla-backend --region=us-central1 --limit=50
gcloud run services logs read moyla-yolo --region=us-central1 --limit=50

# Check service details
gcloud run services describe moyla-frontend --region=us-central1
gcloud run services describe moyla-backend --region=us-central1
gcloud run services describe moyla-yolo --region=us-central1
```

## Complete Deployment Script

```bash
#!/bin/bash

# Set variables
export PROJECT_ID=your-project-id
export REGION=us-central1
export DB_PASSWORD=your_secure_password

# Setup project
gcloud config set project $PROJECT_ID
gcloud services enable run.googleapis.com sql-component.googleapis.com storage.googleapis.com cloudbuild.googleapis.com

# Create database
gcloud sql instances create moyla-db --database-version=POSTGRES_14 --tier=db-f1-micro --region=$REGION
gcloud sql databases create moyla_kothai --instance=moyla-db
gcloud sql users create moyla_user --instance=moyla-db --password=$DB_PASSWORD

# Create storage
gsutil mb -p $PROJECT_ID -c STANDARD -l $REGION gs://${PROJECT_ID}-uploads
gsutil iam ch allUsers:objectViewer gs://${PROJECT_ID}-uploads

# Deploy services
cd python_service
gcloud run deploy moyla-yolo --source . --region=$REGION --allow-unauthenticated --memory=2Gi --cpu=2
export YOLO_URL=$(gcloud run services describe moyla-yolo --region=$REGION --format="value(status.url)")

cd ../backend
gcloud run deploy moyla-backend --source . --region=$REGION --allow-unauthenticated --add-cloudsql-instances=$PROJECT_ID:$REGION:moyla-db --set-env-vars="INSTANCE_CONNECTION_NAME=$PROJECT_ID:$REGION:moyla-db,DB_USER=moyla_user,DB_PASSWORD=$DB_PASSWORD,DB_NAME=moyla_kothai,YOLO_SERVICE_URL=$YOLO_URL,STORAGE_BUCKET=${PROJECT_ID}-uploads"
export BACKEND_URL=$(gcloud run services describe moyla-backend --region=$REGION --format="value(status.url)")

cd ../
echo "REACT_APP_API_BASE_URL=$BACKEND_URL" > .env.production
gcloud run deploy moyla-frontend --source . --region=$REGION --allow-unauthenticated

# Map domain
gcloud run domain-mappings create --service=moyla-frontend --domain=yourdomain.com --region=$REGION

echo "Deployment complete!"
echo "Frontend URL: $(gcloud run services describe moyla-frontend --region=$REGION --format='value(status.url)')"
echo "Backend URL: $BACKEND_URL"
echo "YOLO URL: $YOLO_URL"
echo "Configure DNS with the following command:"
echo "gcloud run domain-mappings describe --domain=yourdomain.com --region=$REGION"
```

## Monthly Cost (After $300 Credit)
- **Cloud Run** (3 services): $0-5 (likely $0 due to free tier)
- **Cloud SQL** (db-f1-micro): $7/month
- **Cloud Storage**: $1-2/month
- **Domain mapping**: $0
- **SSL Certificate**: $0 (automatic)
- **Total**: ~$8-12/month

## What You Get
✅ **Automatic HTTPS/SSL** - Free certificates  
✅ **Custom domain** - yourdomain.com  
✅ **Auto-scaling** - 0 to 1000+ instances  
✅ **Global edge locations** - Built into Cloud Run  
✅ **99.95% uptime SLA**  
✅ **Automatic deployments** with Cloud Build  
✅ **Container security** and isolation  
✅ **Pay-per-use** pricing model